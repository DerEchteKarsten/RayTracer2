#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable
#extension GL_GOOGLE_include_directive : enable

// #include "./restir.glsl"

#include "common.glsl"

layout( push_constant ) uniform Frame {
	uint frame;
	uint moved;
} f;

struct Surfel {
	float radius,
	vec3 position,
	vec3 radiance,
}

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0) buffer ProbeBuffer
{
    Surfel surfels[];
}
layout(binding = 1, set = 1, rgba32f) uniform readonly image2D colorImage;
layout(binding = 2, set = 1, rgba32f) uniform writeonly image2D image;
layout(binding = 3, set = 1) uniform sampler2D depth_image;
layout(binding = 2, set = 2, rgba32f) uniform readonly image2D last_image;

layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
} cam;
layout(location = 0) rayPayloadEXT Payload p;

const int MaxAlphaSurfaces = 1;

void trace(vec3 o, vec3 d, inout vec3 rayColor) {
	for (int t = 0; t<=MaxAlphaSurfaces; t++ ) {
		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, o, tmin, d, tmax, 0);
		if (p.color.a < 1.0) {
			o = p.hitPoint;
			rayColor *= p.color.rgb * p.color.a;
		}else {
			break;
		}
	}
}


vec3 Trace(in vec3 origin, in vec3 rayColor, inout uint state, in vec3 normal, in vec3 emission) {
	vec3 totalLight = emission * 12 * rayColor;
	vec3 direction = normalize(normal + RandomDirection(state));
	trace(origin, direction, rayColor);

	if (!p.missed) {
		origin = p.hitPoint;
		totalLight += p.emission * 12 * rayColor;
		rayColor *= p.color.rgb;

		direction = normalize(p.hitNormal + RandomDirection(state));
		trace(p.hitPoint, direction, rayColor);

		if (!p.missed) {
			totalLight += p.emission * 12 * rayColor;
			rayColor *= p.color.rgb;
		}
	} 
	
	const float dotp = dot(direction, normalize(vec3(1.0, 10.0, 1.0)));
	if (dotp > 0.9) {
		totalLight += dotp * vec3(0.99215, 0.9843, 0.82745) * 200 * rayColor;
	}
	
	return totalLight;
}

const int MaxBounces = 2; 
const int MaxSamples = 4;
vec3 Trace2(in vec3 direction, in vec3 origin, inout uint state) {
	vec3 totalLight = vec3(0.0);

	for (int s = 0; s < MaxSamples; s++) {
		vec3 o = origin;
		vec3 d = direction;
		vec3 incomingLight = vec3(0.0);
		vec3 rayColor = vec3(1.0);
		for (int i = 0; i <= MaxBounces; i++) {
			for (int t = 0; t<=MaxAlphaSurfaces; t++ ) {
				traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, o, tmin, d, tmax, 0);
				if (p.color.a < 1.0) {
					o = p.hitPoint;
					rayColor *= p.color.rgb * p.color.a;
				}else {
					break;
				}
			}
			if (!p.missed) {
				o = p.hitPoint;
				incomingLight += p.emission * 12 * rayColor;

				// float F = FresnelSchlickRoughness(max(0.,-dot(p.hitNormal, d)), p.metallicFactor, p.roughness);

				// if (F > RandomValue(state)) {
				// 	d = modifyDirectionWithRoughness(p.hitNormal, reflect(d,p.hitNormal), p.roughness, state);
				// } else {
					rayColor *= p.color.rgb;
					d = normalize(p.hitNormal + RandomDirection(state));
				// }
			}else {
				// const float dotp = dot(direction, normalize(vec3(1.0, 10.0, 1.0)));
				// if (dotp > 0.9) {
				// 	incomingLight += dotp * vec3(0.99215, 0.9843, 0.82745) * 200 * rayColor;
				// }
				break;
			}
		}
		totalLight += incomingLight;
	}

	return totalLight / MaxSamples;
}

const ivec2[4] positions = {
	ivec2(0,0),
	ivec2(1,0),
	ivec2(0,1),
	ivec2(1,1)
};

void main() 
{	

	// vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	// vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	// vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0) ;
	// vec3 pixelCol2 = Trace2(direction.xyz, origin.xyz, rngState);

	// uint frame_index = f.frame % 4;
	// ivec2 size = ivec2(gl_LaunchSizeEXT.xy * 2);
	ivec2 size = ivec2(gl_LaunchSizeEXT.xy);
	// for (int p = 0; p < 4; p++) {
	// 	ivec2 jitter_offset = positions[p];
	// ivec2 pixelCord = ivec2(gl_LaunchIDEXT.xy * 2) - jitter_offset;
	ivec2 pixelCord = ivec2(gl_LaunchIDEXT.xy);
	// 	if (p == frame_index) {
	const vec2 pixelCenter = vec2(pixelCord.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(size);
	vec2 d = inUV * 2.0 - 1.0;

	uint rngState = uint((pixelCord.y * size.x) + pixelCord.x) + uint(f.frame) * 23145;

	vec4 g_buffer = imageLoad(colorImage, ivec2(pixelCord.xy));
	float depth = texture(depth_image, inUV).r;

	vec4 sPos = vec4(d, depth, 1.0);
	sPos = cam.viewInverse * cam.projInverse * sPos;
	vec3 position = (sPos.xyz / sPos.w);

	vec4 albedo, emission, normal;
	float roughness, metalness;
	unpack(g_buffer, albedo, normal, roughness, metalness, emission);

	vec3 pixelCol;
	if (depth > 1) {
		pixelCol = vec3(0.0, 0.0, 0.0);
	}else {
		pixelCol = Trace(position, albedo.rgb, rngState, normal.rgb, emission.rgb);
	}
	imageStore(image, pixelCord, vec4(pixelCol, 1.0));
	// 	}else{
	// 		vec4 last = imageLoad(last_image, pixelCord);
	// 		if (f.moved == 1) {
	// 			imageStore(image, pixelCord, vec4(0.0, 0.0, 0.0, 1.0));
	// 		}else {
	// 			imageStore(image, pixelCord, last);
	// 		}
	// 	}
	// }

	// vec3 color;
	// if (f.moved == 0) {
	// 	float a =1.0 / float(f.frame+1.0);
	// 	vec3 oldColor = imageLoad(last_image, ivec2(gl_LaunchIDEXT.xy)).xyz;
	// 	color = vec3(mix(oldColor, pixelCol, a));
	// }else{
	// 	color = pixelCol;
	// }
	// imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}