#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable
#extension GL_GOOGLE_include_directive : enable

#pragma pack_matrix(row_major)

#define RTXDI_GLSL
#include "rtxdi/RtxdiTypes.h"
#include "rtxdi/RtxdiMath.hlsli"
#include "ShaderParameters.glsl"
#include "common.glsl"
#include "packing.glsl"
layout(binding = 5, set = 0) uniform sampler2D skyBox;
#include "PolymorphicLight.glsl"

struct PrepareLightsTask {
    uint geometryIndex;
    uint lightBufferOffset;
    uint triangleCount;
    uint pad;
};

layout( push_constant ) uniform GConst {
    uint numTasks;
};

layout(binding = 0, set = 0) readonly buffer GeometryInfos { GeometryInfo geometryInfos[]; };
layout(binding = 1, set = 0) readonly buffer Vertices { Vertex vertices[]; };
layout(binding = 2, set = 0) readonly buffer Indices { uint indices[]; };
layout(binding = 3, set = 0) buffer LightInfoBuffer {RAB_LightInfo t_LightDataBuffer[]; };
layout(binding = 4, set = 0, r32f) uniform image2D t_LocalLightPdfTexture;
layout(binding = 6, set = 0) readonly buffer Tasks {PrepareLightsTask t_TaskBuffer[];};

bool FindTask(uint dispatchThreadId, out PrepareLightsTask task)
{
    // Use binary search to find the task that contains the current thread's output index:
    //   task.lightBufferOffset <= dispatchThreadId < (task.lightBufferOffset + task.triangleCount)

    int left = 0;
    int right = int(numTasks) - 1;

    while (right >= left)
    {
        int middle = (left + right) / 2;
        task = t_TaskBuffer[middle];

        int tri = int(dispatchThreadId) - int(task.lightBufferOffset); // signed

        if (tri < 0)
        {
            // Go left
            right = middle - 1;
        }
        else if (tri < task.triangleCount)
        {
            // Found it!
            return true;
        }
        else
        {
            // Go right
            left = middle + 1;
        }
    }

    return false;
}

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;  
void main()
{
    uint dispatchThreadId = gl_GlobalInvocationID.x;
    PrepareLightsTask task;

    if (!FindTask(dispatchThreadId, task))
        return;

    uint triangleIdx = dispatchThreadId - task.lightBufferOffset;
    
    GeometryInfo geometry = geometryInfos[nonuniformEXT(task.geometryIndex)];
    
    vec3 positions[3];

    uint vertexOffset = geometry.vertexOffset;
    uint indexOffset = geometry.indexOffset + (3 * triangleIdx);

    uint i0 = vertexOffset + indices[nonuniformEXT(indexOffset)];
    uint i1 = vertexOffset + indices[nonuniformEXT(indexOffset + 1)];
    uint i2 = vertexOffset + indices[nonuniformEXT(indexOffset + 2)];

    Vertex v0 = vertices[nonuniformEXT(i0)];
	Vertex v1 = vertices[nonuniformEXT(i1)];
	Vertex v2 = vertices[nonuniformEXT(i2)];

    positions[0] = v0.pos;
    positions[1] = v1.pos;
    positions[2] = v2.pos;

    vec3 radiance = geometry.emission.xyz * 12.0;

    TriangleLight triLight; 
    triLight.base = positions[0];
    triLight.edge1 = positions[1] - positions[0];
    triLight.edge2 = positions[2] - positions[0];
    triLight.radiance = radiance;

    RAB_LightInfo lightInfo = StoreTriangleLight(triLight);

    uint lightBufferPtr = task.lightBufferOffset + triangleIdx;
    t_LightDataBuffer[lightBufferPtr] = lightInfo;

    float emissiveFlux = getPower(lightInfo);

    uvec2 pdfTexturePosition = RTXDI_LinearIndexToZCurve(lightBufferPtr);
    imageStore(t_LocalLightPdfTexture, ivec2(pdfTexturePosition), vec4(emissiveFlux));
}