#version 450

#include "g_buffer.glsl"

vec3 GenCoarseRay(in vec2 bias) {
	vec2 uv = (vec2(ivec2(gl_FragCoord.xy)) + bias) / vec2(cam.controlls.z / 8.0, cam.controlls.w / 8.0);
	vec2 d = uv * 2.0 - 1.0;
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0);
	return direction.xyz;
}

float RayTangent(in vec3 x, in vec3 y) {
	float c = dot(x, y);
	return sqrt(1.0 - c * c) / abs(c);
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;  

void main() {
    const vec2 pixelCenter = vec2(gl_FragCoord.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(cam.controlls.zw / 8.0);
	vec2 d = inUV * 2.0 - 1.0;
	vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0) ;

	vec3 dir = direction.xyz;
	vec3 o = origin.xyz;

	float t0 = RayTangent(dir, GenCoarseRay(vec2(0.5, 0.5)));
	float t1 = RayTangent(dir, GenCoarseRay(vec2(-0.5, 0.5)));
	float t2 = RayTangent(dir, GenCoarseRay(vec2(0.5, -0.5)));
	float t3 = RayTangent(dir, GenCoarseRay(vec2(-0.5, -0.5)));
	float dir_sz = 2.0 * max(max(t0, t1), max(t2, t3)), t, size;

    Octree_RayMarchCoarse(o, dir, uOriginSize, dir_sz, t, size) ? max(0.0, t - size) : 1e10;
}