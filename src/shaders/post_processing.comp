#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_debug_printf: enable

#include "packing.glsl"
#include "ShaderParameters.glsl"
#include "GBufferHelpers.glsl"

layout(binding = 0, set = 0, r32f) uniform image2D GBufferDepth;
layout(binding = 1, set = 0, r32ui) uniform uimage2D GBufferDiffuseAlbedo;
layout(binding = 2, set = 0, r32ui) uniform uimage2D GBufferSpecularRough;
layout(binding = 3, set = 0, rgba16f) uniform image2D GBufferEmissive;
layout(binding = 4, set = 0, rgba32f) uniform image2D MotionVectors;
layout(binding = 1, set = 1, rgba16f) uniform image2D Diffuse;
layout(binding = 2, set = 1, rgba16f) uniform image2D Specular;
layout(binding = 3, set = 1) uniform Uniform {ResamplingConstants g_Const;};
layout(binding = 4, set = 1) uniform sampler2D SkyBox;

layout(binding = 0, set = 2, rgba8) uniform image2D outputImage;

#define square(x) x*x

#define PI 3.1415926

#define AGX_LOOK 0

vec2 directionToEquirectUV(vec3 normalizedDirection)
{
    float u = (0.5 + atan2(normalizedDirection.z, normalizedDirection.x)/(2*PI));
    float v = (0.5 - asin(normalizedDirection.y)/PI);

    return vec2(u, v);
}

vec3 GetEnvironmentRadiance(vec3 direction)
{
    if(g_Const.environment == 1) {
        float2 uv = directionToEquirectUV(direction);
        vec3 environmentRadiance = texture(SkyBox, uv).rgb;
        return environmentRadiance;
    }else {
        return vec3(0.0);
    }
}

// Mean error^2: 3.6705141e-06
vec3 agxDefaultContrastApprox(vec3 x) {
  vec3 x2 = x * x;
  vec3 x4 = x2 * x2;
  
  return + 15.5     * x4 * x2
         - 40.14    * x4 * x
         + 31.96    * x4
         - 6.868    * x2 * x
         + 0.4298   * x2
         + 0.1191   * x
         - 0.00232;
}

vec3 agx(vec3 val) {
  const mat3 agx_mat = mat3(
    0.842479062253094, 0.0423282422610123, 0.0423756549057051,
    0.0784335999999992,  0.878468636469772,  0.0784336,
    0.0792237451477643, 0.0791661274605434, 0.879142973793104);
    
  const float min_ev = -12.47393f;
  const float max_ev = 4.026069f;

  // Input transform (inset)
  val = agx_mat * val;
  
  // Log2 space encoding
  val = clamp(log2(val), min_ev, max_ev);
  val = (val - min_ev) / (max_ev - min_ev);
  
  // Apply sigmoid function approximation
  val = agxDefaultContrastApprox(val);

  return val;
}

vec3 agxEotf(vec3 val) {
  const mat3 agx_mat_inv = mat3(
    1.19687900512017, -0.0528968517574562, -0.0529716355144438,
    -0.0980208811401368, 1.15190312990417, -0.0980434501171241,
    -0.0990297440797205, -0.0989611768448433, 1.15107367264116);
    
  // Inverse input transform (outset)
  val = agx_mat_inv * val;
  
  // sRGB IEC 61966-2-1 2.2 Exponent Reference EOTF Display
  // NOTE: We're linearizing the output here. Comment/adjust when
  // *not* using a sRGB render target
  val = pow(val, vec3(2.2));

  return val;
}

vec3 agxLook(vec3 val) {
  const vec3 lw = vec3(0.2126, 0.7152, 0.0722);
  float luma = dot(val, lw);
  
  // Default
  vec3 offset = vec3(0.0);
  vec3 slope = vec3(1.0);
  vec3 power = vec3(1.0);
  float sat = 1.0;
 
#if AGX_LOOK == 1
  // Golden
  slope = vec3(1.0, 0.9, 0.5);
  power = vec3(0.8);
  sat = 0.8;
#elif AGX_LOOK == 2
  // Punchy
  slope = vec3(1.0);
  power = vec3(1.35, 1.35, 1.35);
  sat = 1.4;
#endif
  
  // ASC CDL
  val = pow(val * slope + offset, power);
  return luma + sat * (val - luma);
}


vec2 getEnvironmentMotionVector(
    PlanarViewConstants view,
    PlanarViewConstants viewPrev,
    vec2 windowPos)
{
    vec4 clipPos;
    clipPos.xy = view.windowToClipScale * windowPos + view.windowToClipBias;
    clipPos.z = 0.0;
    clipPos.w = 1.0;

    float4 worldPos = view.matClipToWorld * clipPos;
    float4 prevClipPos = viewPrev.matWorldToClip * worldPos;

    prevClipPos.xyz /= prevClipPos.w;

    float2 motion = view.clipToWindowScale * (prevClipPos.xy - clipPos.xy);
    motion += view.pixelOffset - viewPrev.pixelOffset;

    return motion;
}

const float gamma = 2.2;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;  

void main() {
    vec3 col = vec3(0);
    ivec2 globalIdx = ivec2(gl_GlobalInvocationID.xy);

    if (g_Const.refrenceMode == 1) {
      	col = imageLoad(Diffuse, globalIdx).rgb;
    }else if (imageLoad(GBufferDepth, globalIdx).r != BACKGROUND_DEPTH) {
        vec3 diffuseAlbedo = Unpack_R11G11B10_UFLOAT(imageLoad(GBufferDiffuseAlbedo, globalIdx).r).rgb;
        vec3 specularF0 = Unpack_R8G8B8A8_Gamma_UFLOAT(imageLoad(GBufferSpecularRough, globalIdx).r).rgb;
        vec3 emissive = imageLoad(GBufferEmissive, globalIdx).rgb;

        vec4 diffuse_illumination = imageLoad(Diffuse, globalIdx).rgba;
        vec4 specular_illumination = imageLoad(Specular, globalIdx).rgba;

        if (g_Const.textures == 1)
        {
            diffuse_illumination.rgb *= diffuseAlbedo;
            specular_illumination.rgb *= max(vec3(0.01), specularF0);
        }

        col = diffuse_illumination.rgb;
        col += specular_illumination.rgb;
        col += emissive.rgb; 
    } else {
        RayDesc ray = setupPrimaryRay(uvec2(globalIdx), g_Const.view);

        imageStore(MotionVectors, globalIdx, vec4(getEnvironmentMotionVector(g_Const.view, g_Const.prevView, vec2(globalIdx) + vec2(0.5)), 0.0, 0.0));
		    col = GetEnvironmentRadiance(ray.Direction);
    }
    
    col = agx(col);
    col = agxLook(col);
    col = agxEotf(col);
    col = max(col, 0.000001);
    vec3 gamma_cor = pow(col, vec3(1.0 / gamma));

    if(any(isnan(col)))
      col = vec3(1, 0, 0);
    imageStore(outputImage, globalIdx, vec4(col, 1.0));
}