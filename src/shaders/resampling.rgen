#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable
#extension GL_GOOGLE_include_directive : enable

#include "common.glsl"
layout(location = 0) rayPayloadEXT Payload p;
layout( push_constant ) uniform Frame {
	uint frame;
	uint moved;
} f;


layout(binding = 0, set = 1, r32f) uniform readonly image2D u_GBufferDepth;
layout(binding = 1, set = 1, r32ui) uniform readonly uimage2D u_GBufferNormals;
layout(binding = 2, set = 1, r32ui) uniform readonly uimage2D u_GBufferGeoNormals;
layout(binding = 3, set = 1, r32ui) uniform readonly uimage2D u_GBufferDiffuseAlbedo;
layout(binding = 4, set = 1, r32ui) uniform readonly uimage2D u_GBufferSpecularRough;
layout(binding = 5, set = 1, rgba32f) uniform readonly image2D u_MotionVectors;


#define RTXDI_ENABLE_PRESAMPLING 0
#define RTXDI_GLSL
#include "RtxdiApplicationBridge.glsl"
#include "rtxdi/GIResamplingFunctions.hlsli"

void main() {
    ivec2 GlobalIndex = ivec2(gl_LaunchIDEXT.xy);
    uvec2 pixelPosition = RTXDI_ReservoirPosToPixelPos(GlobalIndex, g_Const.runtimeParams.activeCheckerboardField);

    RAB_RandomSamplerState rng = RAB_InitRandomSampler(GlobalIndex, 7);
    
    const RAB_Surface primarySurface = RAB_GetGBufferSurface(ivec2(pixelPosition), false);
    
    const uvec2 reservoirPosition = RTXDI_PixelPosToReservoirPos(pixelPosition, g_Const.runtimeParams.activeCheckerboardField);
    RTXDI_GIReservoir reservoir = RTXDI_LoadGIReservoir(g_Const.restirGI.reservoirBufferParams, reservoirPosition, g_Const.restirGI.bufferIndices.secondarySurfaceReSTIRDIOutputBufferIndex);

    vec3 motionVector = imageLoad(u_MotionVectors, ivec2(pixelPosition)).xyz;
    motionVector = convertMotionVectorToPixelSpace(g_Const.view, g_Const.prevView, ivec2(pixelPosition), motionVector);

    if (RAB_IsSurfaceValid(primarySurface)) {
        RTXDI_GISpatioTemporalResamplingParameters stParams;

        stParams.screenSpaceMotion = motionVector;
        stParams.sourceBufferIndex = g_Const.restirGI.bufferIndices.temporalResamplingInputBufferIndex;
        stParams.maxHistoryLength = g_Const.restirGI.temporalResamplingParams.maxHistoryLength;
        stParams.biasCorrectionMode = g_Const.restirGI.temporalResamplingParams.temporalBiasCorrectionMode;
        stParams.depthThreshold = g_Const.restirGI.temporalResamplingParams.depthThreshold;
        stParams.normalThreshold = g_Const.restirGI.temporalResamplingParams.normalThreshold;
        stParams.enablePermutationSampling = g_Const.restirGI.temporalResamplingParams.enablePermutationSampling == 1;
        stParams.enableFallbackSampling = g_Const.restirGI.temporalResamplingParams.enableFallbackSampling == 1;
        stParams.numSpatialSamples = g_Const.restirGI.spatialResamplingParams.numSpatialSamples;
        stParams.samplingRadius = g_Const.restirGI.spatialResamplingParams.spatialSamplingRadius;
        stParams.uniformRandomNumber = g_Const.restirGI.temporalResamplingParams.uniformRandomNumber;

        // Age threshold should vary.
        // This is to avoid to die a bunch of GI reservoirs at once at a disoccluded area.
        stParams.maxReservoirAge = uint(float(g_Const.restirGI.temporalResamplingParams.maxReservoirAge) * (0.5 + RAB_GetNextRandom(rng) * 0.5));

        // Execute resampling.
        reservoir = RTXDI_GISpatioTemporalResampling(pixelPosition, primarySurface, reservoir, rng, g_Const.runtimeParams, g_Const.restirGI.reservoirBufferParams, stParams);

    }
    RTXDI_StoreGIReservoir(reservoir, g_Const.restirGI.reservoirBufferParams, reservoirPosition, g_Const.restirGI.bufferIndices.spatialResamplingOutputBufferIndex);
}