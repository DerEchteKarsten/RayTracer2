#version 460
#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable

layout( push_constant ) uniform Frame {
	uint frame;
	uint moved;
} f;

#include "./restir.glsl"


layout (binding = 0, set=0) buffer temporalReservoirs {
	Reservoir temporalReservoirs[];
} tr;

layout (binding = 1, set=0) buffer spaceialReservoirs {
	Reservoir spaceialReservoirs[];
} sr;

layout (binding = 2, set=0) readonly buffer InitialSamples {
	Sample initialSamples[];
} is;

layout(binding = 3, set = 0, rgba32f) uniform image2D image;


uint toLinearIndex(in uvec2 pixel) {
    return pixel.y * gl_WorkGroupSize.x + pixel.x;
}

float luminance(in vec3 rgb)
{
    return dot(rgb, normalize(vec3(0.2126f, 0.7152f, 0.0722f)));
}

Reservoir EmptyReservoir()
{
    Reservoir s;

    s.s.samplePoint = vec3(0.0);
    s.s.samplePointNormal = vec3(0.0);
    s.s.origin = vec3(0);
    s.s.originNormal = vec3(0);
    s.s.depth = tmax;
    s.s.radiance = vec3(0.0);
    s.s.randomDirection = vec3(0);
    s.weightOfReservoir = 0.0;
    s.numCandidateSamples = 0;
    s.weightOfSample = 0;

    return s;
}


void CalculatePartialJacobian(const vec3 recieverPos, const vec3 samplePos, const vec3 sampleNormal,
    out float distanceToSurface, out float cosineEmissionAngle)
{
    vec3 vec = recieverPos - samplePos;

    distanceToSurface = length(vec);
    cosineEmissionAngle = clamp(dot(sampleNormal, vec / distanceToSurface), 0, 1);
}

// Calculates the full Jacobian for resampling neighborReservoir into a new receiver surface
float CalculateJacobian(in vec3 recieverPos, in vec3 neighborReceiverPos, const Reservoir neighborReservoir)
{
    // Calculate Jacobian determinant to adjust weight.
    // See Equation (11) in the ReSTIR GI paper.
    float originalDistance, originalCosine;
    float newDistance, newCosine;
    CalculatePartialJacobian(recieverPos, neighborReservoir.s.samplePoint, neighborReservoir.s.samplePointNormal, newDistance, newCosine);
    CalculatePartialJacobian(neighborReceiverPos, neighborReservoir.s.samplePoint, neighborReservoir.s.samplePointNormal, originalDistance, originalCosine);

    float jacobian = (newCosine * originalDistance * originalDistance)
        / (originalCosine * newDistance * newDistance);

    if (isinf(jacobian) || isnan(jacobian))
        jacobian = 0;

    return jacobian;
}


bool ValidateSampleWithJacobian(inout float jacobian)
{
    // Sold angle ratio is too different. Discard the sample.
    if (jacobian > 10.0 || jacobian < 1 / 10.0) {
        return false;
    }

    // clamp Jacobian.
    jacobian = clamp(jacobian, 1 / 3.0, 3.0);

    return true;
}

float evalTargetFunction(in Sample s)
{
    return luminance(s.radiance * s.albedo);
}

const ivec2[4] neigbur_offsets = {
    ivec2(0, 1),
    ivec2(0, -1),
    ivec2(1, 0),
    ivec2(-1, 0),
};

const uint maxTemporalSamples = 100;
void temporal_reuse(uint q, inout uint rngState) {
    Sample S = is.initialSamples[q];
    Reservoir R = tr.temporalReservoirs[q];

    if (f.moved == 1) {
        R.s = S;
        R.weightOfSample = 1;
        R.weightOfReservoir = 0;
        R.numCandidateSamples = 1;
    } else {
        float w = evalTargetFunction(S) / (dot(S.originNormal, S.randomDirection));

        update_reservoir(R, S, w, rngState);
        R.weightOfSample = (R.weightOfReservoir / (R.numCandidateSamples * evalTargetFunction(R.s)));
    }
    tr.temporalReservoirs[q] = R;
}

const float reuse_radius = 1;
const uint max_reuse_samples = 1;
void spatial_reuse(uint q, inout uint rngState) {
    Reservoir Rt = tr.temporalReservoirs[q];
    Reservoir Rs = Rt;
    Sample S = is.initialSamples[q];
    if (f.moved == 1) {
        sr.spaceialReservoirs[q] = tr.temporalReservoirs[q];
        return;
    }

    for (int s = 0; s < max_reuse_samples; s++) {
        vec2 dir = (vec2(1) - RandomDirection2(rngState)) * reuse_radius;
        uint qn = q + toLinearIndex(uvec2(dir));

        if ((qn > gl_NumWorkGroups.x * gl_NumWorkGroups.y)) {
            continue;
        }

        Sample Sqn = is.initialSamples[qn];

        if (dot(Rs.s.originNormal, Sqn.originNormal) < 0.9) {
            continue;
        }

        Reservoir Rn = tr.temporalReservoirs[qn];
        if (Rn.s.missed) {
            continue;
        }
        //Jacobian
        float jacobian = CalculateJacobian(Rs.s.origin, Rn.s.origin, Rn);
        if (!ValidateSampleWithJacobian(jacobian)) {
            continue;
        }
        float p_hat = evalTargetFunction(Rn.s) * jacobian;

        // Visibility
        merge_reservoir(Rs, Rn, p_hat, rngState);
    }
  
    Rs.weightOfSample = Rs.weightOfReservoir / ( Rs.numCandidateSamples * evalTargetFunction(Rs.s));
    sr.spaceialReservoirs[q] = Rs;
}

void main() {
    uint pixelIndex = (gl_GlobalInvocationID.y * gl_NumWorkGroups.x) + gl_GlobalInvocationID.x;
	uint rngState = pixelIndex + uint(f.frame) * 23145;

    temporal_reuse(pixelIndex, rngState);
    // spatial_reuse(pixelIndex, rngState);
    
    Reservoir r = tr.temporalReservoirs[pixelIndex];

    vec3 color = r.s.radiance;
    // if (f.moved == 0) {
    //     float a = 1.0 / float(f.frame+1.0);
    //     vec3 oldColor = imageLoad(image, ivec2(gl_WorkGroupID.xy)).xyz;
    //     color = vec3(mix(oldColor, color, a));
    // } else {
    //     color = s.radiance; 
    // }
    imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(color * r.weightOfSample, 1.0));
}