#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require

#include "common.glsl"

layout(location = 0) rayPayloadEXT Payload p;

#include "RtxdiApplicationBridge.glsl"
#include "rtxdi/InitialSamplingFunctions.hlsli"
#include "rtxdi/DIResamplingFunctions.hlsli"
#include "rtxdi/GIResamplingFunctions.hlsli"

#include "GBufferHelpers.glsl"
#include "ShaderParameters.glsl"
#include "ShadingHelpers.glsl"

const uint numPrimaryLocalLightSamples = 1;
const uint numPrimaryInfiniteLightSamples = 1;
const uint numPrimaryEnvironmentSamples = 1;

const float c_MaxIndirectRadiance = 100.0;

void main() {
    uint2 GlobalIndex = gl_LaunchIDEXT.xy;
    uint2 pixelPosition = RTXDI_ReservoirPosToPixelPos(GlobalIndex, g_Const.runtimeParams.activeCheckerboardField);

    RAB_RandomSamplerState rng = RAB_InitRandomSampler(GlobalIndex, 6);
    RAB_RandomSamplerState tileRng = RAB_InitRandomSampler(GlobalIndex / RTXDI_TILE_SIZE_IN_PIXELS, 1);

    const RTXDI_RuntimeParameters params = g_Const.runtimeParams;

    const uint gbufferIndex = RTXDI_ReservoirPositionToPointer(g_Const.restirDI.reservoirBufferParams, GlobalIndex, 0);

    RAB_Surface primarySurface = RAB_GetGBufferSurface(ivec2(pixelPosition), false);

    SecondaryGBufferData secondaryGBufferData = SecondaryGBuffer[gbufferIndex];

    const float3 throughput = Unpack_R16G16B16A16_FLOAT(secondaryGBufferData.throughputAndFlags).rgb;
    const uint secondaryFlags = secondaryGBufferData.throughputAndFlags.y >> 16;
    const bool isValidSecondarySurface = any(bvec3(throughput.x != 0, throughput.y != 0, throughput.z != 0));
    const bool isSpecularRay = (secondaryFlags & kSecondaryGBuffer_IsSpecularRay) != 0;
    const bool isDeltaSurface = (secondaryFlags & kSecondaryGBuffer_IsDeltaSurface) != 0;
    const bool isEnvironmentMap = (secondaryFlags & kSecondaryGBuffer_IsEnvironmentMap) != 0;

    RAB_Surface secondarySurface;
    float3 radiance = secondaryGBufferData.emission;

    // Unpack the G-buffer data
    secondarySurface.worldPos = secondaryGBufferData.worldPos;
    secondarySurface.viewDepth = 1.0; // doesn't matter
    secondarySurface.normal = octToNdirUnorm32(secondaryGBufferData.normal);
    secondarySurface.geoNormal = secondarySurface.normal;
    secondarySurface.diffuseAlbedo = Unpack_R11G11B10_UFLOAT(secondaryGBufferData.diffuseAlbedo);
    float4 specularRough = Unpack_R8G8B8A8_Gamma_UFLOAT(secondaryGBufferData.specularAndRoughness);
    secondarySurface.specularF0 = specularRough.rgb;
    secondarySurface.roughness = specularRough.a;
    secondarySurface.diffuseProbability = getSurfaceDiffuseProbability(secondarySurface);
    secondarySurface.viewDir = normalize(primarySurface.worldPos - secondarySurface.worldPos);

    // // Shade the secondary surface.
    // if (isValidSecondarySurface && !isEnvironmentMap)
    // {
    //     RTXDI_SampleParameters sampleParams = RTXDI_InitSampleParameters(
    //         numPrimaryLocalLightSamples,
    //         numPrimaryInfiniteLightSamples,
    //         numPrimaryEnvironmentSamples,
    //         0,      // numBrdfSamples
    //         0.f,    // brdfCutoff 
    //         0.f);   // brdfMinRayT

    //     RAB_LightSample lightSample;
    //     RTXDI_DIReservoir reservoir = RTXDI_SampleLightsForSurface(rng, tileRng, secondarySurface,
    //         sampleParams, g_Const.lightBufferParams, g_Const.restirDI.initialSamplingParams.localLightSamplingMode,
    //     g_Const.localLightsRISBufferSegmentParams, g_Const.environmentLightRISBufferSegmentParams,
    //     lightSample);

    //     float4 secondaryClipPos = g_Const.view.matWorldToClip * float4(secondaryGBufferData.worldPos, 1.0);
    //     secondaryClipPos.xyz /= secondaryClipPos.w;

    //     if (all(bvec2(abs(secondaryClipPos.x) < 1.0, abs(secondaryClipPos.y) < 1.0)) && secondaryClipPos.w > 0)
    //     {
    //         int2 secondaryPixelPos = int2(secondaryClipPos.xy * g_Const.view.clipToWindowScale + g_Const.view.clipToWindowBias);
    //         secondarySurface.viewDepth = secondaryClipPos.w;

    //         RTXDI_DISpatialResamplingParameters sparams;
    //         sparams.sourceBufferIndex = g_Const.restirDI.bufferIndices.shadingInputBufferIndex;
    //         sparams.numSamples = g_Const.restirDI.spatialResamplingParams.numSpatialSamples;
    //         sparams.numDisocclusionBoostSamples = 0;
    //         sparams.targetHistoryLength = 0;
    //         sparams.biasCorrectionMode = g_Const.restirDI.spatialResamplingParams.spatialBiasCorrection;
    //         sparams.samplingRadius = g_Const.restirDI.spatialResamplingParams.spatialSamplingRadius;
    //         sparams.depthThreshold = g_Const.restirDI.spatialResamplingParams.spatialDepthThreshold;
    //         sparams.normalThreshold = g_Const.restirDI.spatialResamplingParams.spatialNormalThreshold;
    //         sparams.enableMaterialSimilarityTest = false;
    //         sparams.discountNaiveSamples = false;

    //         reservoir = RTXDI_DISpatialResampling(secondaryPixelPos, secondarySurface, reservoir,
    //             rng, params, g_Const.restirDI.reservoirBufferParams, sparams, lightSample);
    //     }

    //     float3 indirectDiffuse = vec3(0);
    //     float3 indirectSpecular = vec3(0);
    //     float lightDistance = 0;
    //     ShadeSurfaceWithLightSample(reservoir, secondarySurface, lightSample, /* previousFrameTLAS = */ false,
    //         /* enableVisibilityReuse = */ false, indirectDiffuse, indirectSpecular, lightDistance);

    //     radiance += indirectDiffuse * secondarySurface.diffuseAlbedo + indirectSpecular;

    //     // Firefly suppression
    //     float indirectLuminance = calcLuminance(radiance);
    //     if (indirectLuminance > c_MaxIndirectRadiance)
    //         radiance *= c_MaxIndirectRadiance / indirectLuminance;
    // }


    RTXDI_GIReservoir reservoir = RTXDI_EmptyGIReservoir();

    // // For delta reflection rays, just output the shading result in this shader
    // // and don't include it into ReSTIR GI reservoirs.
    bool outputShadingResult = isSpecularRay && isDeltaSurface;
    if (isValidSecondarySurface && !outputShadingResult)
    {
        radiance = secondarySurface.diffuseAlbedo;
        // This pixel has a valid indirect sample so it stores information as an initial GI reservoir.
        reservoir = RTXDI_MakeGIReservoir(secondarySurface.worldPos,
            secondarySurface.normal, radiance, secondaryGBufferData.pdf);
    }
    uint2 reservoirPosition = RTXDI_PixelPosToReservoirPos(pixelPosition, g_Const.runtimeParams.activeCheckerboardField);
    RTXDI_StoreGIReservoir(reservoir, g_Const.restirGI.reservoirBufferParams, reservoirPosition, g_Const.restirGI.bufferIndices.secondarySurfaceReSTIRDIOutputBufferIndex);

    // Save the initial sample radiance for MIS in the final shading pass
    secondaryGBufferData.emission = outputShadingResult ? vec3(0) : radiance;
    SecondaryGBuffer[gbufferIndex] = secondaryGBufferData;

    if (outputShadingResult)
    {
        vec3 diffuse = isSpecularRay ? vec3(0.0) : radiance;
        vec3 specular = isSpecularRay ? radiance : vec3(0.0);

        specular = DemodulateSpecular(primarySurface.specularF0, specular);

        StoreShadingOutput(ivec2(pixelPosition), 
            primarySurface.viewDepth, primarySurface.roughness, diffuse, specular, 0, false);
    }
}