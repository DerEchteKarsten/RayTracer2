#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require

#include "common.glsl"

layout(location = 0) rayPayloadEXT Payload p;

#include "RtxdiApplicationBridge.glsl"
#include "rtxdi/InitialSamplingFunctions.hlsli"
#include "rtxdi/DIResamplingFunctions.hlsli"
#include "rtxdi/GIResamplingFunctions.hlsli"
#include "ShadingHelpers.glsl"
#include "ShaderParameters.glsl"
#include "Hit.glsl"

void main() 
{	
    uint2 pixelPosition = RTXDI_ReservoirPosToPixelPos(gl_LaunchIDEXT.xy, g_Const.runtimeParams.activeCheckerboardField);

    RAB_Surface surface = RAB_GetGBufferSurface(ivec2(pixelPosition), false);

    if (!RAB_IsSurfaceValid(surface))
        return;

    RAB_RandomSamplerState rng = RAB_InitRandomSampler(gl_LaunchIDEXT.xy, 5);
    
    float3 tangent, bitangent;
    branchlessONB(surface.normal, tangent, bitangent);

    float depth = max(1, 0.1 * length(surface.worldPos - g_Const.view.cameraDirectionOrPosition.xyz));

    RayDesc ray;
    ray.TMin = 0.001 * depth;
    ray.TMax = BACKGROUND_DEPTH;

    float2 Rand;
    Rand.x = RAB_GetNextRandom(rng);
    Rand.y = RAB_GetNextRandom(rng);

    float3 V = normalize(g_Const.view.cameraDirectionOrPosition.xyz - surface.worldPos);

    bool isSpecularRay = false;
    bool isDeltaSurface = surface.roughness == 0;
    float specular_PDF;
    float3 BRDF_over_PDF;
    float overall_PDF;

    {
        float3 specularDirection;
        float3 specular_BRDF_over_PDF;
        {
            float3 Ve = float3(dot(V, tangent), dot(V, bitangent), dot(V, surface.normal));
            float3 He = sampleGGX_VNDF(Ve, surface.roughness, Rand);
            float3 H = isDeltaSurface ? surface.normal : normalize(He.x * tangent + He.y * bitangent + He.z * surface.normal);
            specularDirection = reflect(-V, H);

            float HoV = saturate(dot(H, V));
            float NoV = saturate(dot(surface.normal, V));
            float3 F = Schlick_Fresnel(surface.specularF0, HoV);
            float G1 = isDeltaSurface ? 1.0 : (NoV > 0) ? G1_Smith(surface.roughness, NoV) : 0;
            specular_BRDF_over_PDF = F * G1;
        }

        float3 diffuseDirection;
        float diffuse_BRDF_over_PDF;
        {
            float solidAnglePdf;
            float3 localDirection = SampleCosHemisphere(Rand, solidAnglePdf);
            diffuseDirection = tangent * localDirection.x + bitangent * localDirection.y + surface.normal * localDirection.z;
            diffuse_BRDF_over_PDF = 1.0;
        }

        specular_PDF = saturate(calcLuminance(specular_BRDF_over_PDF) /
            calcLuminance(specular_BRDF_over_PDF + diffuse_BRDF_over_PDF * surface.diffuseAlbedo));

        isSpecularRay = RAB_GetNextRandom(rng) < specular_PDF;

        if (isSpecularRay)
        {
            ray.Direction = specularDirection;
            BRDF_over_PDF = specular_BRDF_over_PDF / specular_PDF;
        }
        else
        {
            ray.Direction = diffuseDirection;
            BRDF_over_PDF = vec3(diffuse_BRDF_over_PDF / (1.0 - specular_PDF));
        }

        const float specularLobe_PDF = ImportanceSampleGGX_VNDF_PDF(surface.roughness, surface.normal, V, ray.Direction);
        const float diffuseLobe_PDF = saturate(dot(ray.Direction, surface.normal)) / RTXDI_PI;

        // For delta surfaces, we only pass the diffuse lobe to ReSTIR GI, and this pdf is for that.
        overall_PDF = isDeltaSurface ? diffuseLobe_PDF : mix(diffuseLobe_PDF, specularLobe_PDF, specular_PDF);
    }

    if (dot(surface.geoNormal, ray.Direction) <= 0.0)
    {
        BRDF_over_PDF = vec3(0.0);
        ray.TMax = 0;
    }

    ray.Origin = surface.worldPos;

    float3 radiance = vec3(0);
    
    trace(ray);
    
    struct 
    {
        float3 position;
        float3 normal;
        float3 diffuseAlbedo;
        float3 specularF0;
        float roughness;
        bool isEnvironmentMap;
    } secondarySurface;

    // Include the emissive component of surfaces seen with BRDF rays if requested (i.e. when Direct Lighting mode
    // is set to BRDF) or on delta reflection rays because those bypass ReSTIR GI and direct specular lighting,
    // and we need to see reflections of lamps and the sky in mirrors.
    const bool includeEmissiveComponent = isSpecularRay && isDeltaSurface;

    if (p.geometryIndex != ~0u)
    {
        vec3 normal, specularF0, color, emission;
        float roughness;
        GetGeometryFromHit(p.primitiveId, p.geometryIndex, p.uv, normal, specularF0, roughness, color, emission);

        if (includeEmissiveComponent)
            radiance += emission;

        secondarySurface.position = ray.Origin + ray.Direction * p.depth;
        secondarySurface.normal = (dot(normal, ray.Direction) < 0) ? normal : -normal;
        secondarySurface.diffuseAlbedo = color;
        secondarySurface.specularF0 = specularF0;
        secondarySurface.roughness = roughness;
        secondarySurface.isEnvironmentMap = false;

        RayDesc primary_ray = setupPrimaryRay(pixelPosition, g_Const.view);
        trace(primary_ray);
        secondarySurface.diffuseAlbedo = vec3(abs(p.depth - surface.viewDepth));
    }
    else
    {
        if (includeEmissiveComponent)
        {
            vec3 environmentRadiance = GetEnvironmentRadiance(ray.Direction);
            radiance += environmentRadiance;
        }

        secondarySurface.position = ray.Origin + ray.Direction * DISTANT_LIGHT_DISTANCE;
        secondarySurface.normal = -ray.Direction;
        secondarySurface.diffuseAlbedo = vec3(0);
        secondarySurface.specularF0 = vec3(0);
        secondarySurface.roughness = 0.0;
        secondarySurface.isEnvironmentMap = true;
    }

    SecondaryGBufferData secondaryGBufferData;
    secondaryGBufferData.worldPos = secondarySurface.position;
    secondaryGBufferData.normal = ndirToOctUnorm32(secondarySurface.normal);
    secondaryGBufferData.throughputAndFlags = Pack_R16G16B16A16_FLOAT(float4(BRDF_over_PDF, 0));
    secondaryGBufferData.diffuseAlbedo = Pack_R11G11B10_UFLOAT(secondarySurface.diffuseAlbedo);
    secondaryGBufferData.specularAndRoughness = Pack_R8G8B8A8_Gamma_UFLOAT(float4(secondarySurface.specularF0, secondarySurface.roughness));
    secondaryGBufferData.emission = radiance;
    secondaryGBufferData.pdf = overall_PDF;
    
    uint flags = 0;
    if (isSpecularRay) flags |= kSecondaryGBuffer_IsSpecularRay;
    if (isDeltaSurface) flags |= kSecondaryGBuffer_IsDeltaSurface;
    if (secondarySurface.isEnvironmentMap) flags |= kSecondaryGBuffer_IsEnvironmentMap;
    secondaryGBufferData.throughputAndFlags.y |= flags << 16;

    uint gbufferIndex = RTXDI_ReservoirPositionToPointer(g_Const.restirGI.reservoirBufferParams, gl_LaunchIDEXT.xy, 0);
    SecondaryGBuffer[gbufferIndex] = secondaryGBufferData;
}