#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require

#include "../common.glsl"

layout(location = 0) rayPayloadEXT Payload p;

#include "RtxdiApplicationBridge.glsl"
#include "../rtxdi/GIResamplingFunctions.hlsli"

layout(location = 0) rayPayloadEXT Payload {
    bool missed;
} p;

void main() {
    uvec2 pixelPosition = RTXDI_ReservoirPosToPixelPos(gl_LaunchIDEXT.xy, g_Const.runtimeParams.activeCheckerboardField);

    RAB_RandomSamplerState rng = RAB_InitRandomSampler(gl_LaunchIDEXT.xy, 8);
    
    const RAB_Surface primarySurface = RAB_GetGBufferSurface(ivec2(pixelPosition), false);
    
    const uint2 reservoirPosition = RTXDI_PixelPosToReservoirPos(pixelPosition, g_Const.runtimeParams.activeCheckerboardField);
    RTXDI_GIReservoir reservoir = RTXDI_LoadGIReservoir(g_Const.restirGI.reservoirBufferParams, reservoirPosition, g_Const.restirGI.bufferIndices.spatialResamplingInputBufferIndex);


    if (RAB_IsSurfaceValid(primarySurface)) {
        RTXDI_GISpatialResamplingParameters sparams;

        sparams.sourceBufferIndex = g_Const.restirGI.bufferIndices.spatialResamplingInputBufferIndex;
        sparams.biasCorrectionMode = g_Const.restirGI.spatialResamplingParams.spatialBiasCorrectionMode;
        sparams.depthThreshold = g_Const.restirGI.spatialResamplingParams.spatialDepthThreshold;
        sparams.normalThreshold = g_Const.restirGI.spatialResamplingParams.spatialNormalThreshold;
        sparams.numSamples = g_Const.restirGI.spatialResamplingParams.numSpatialSamples;
        sparams.samplingRadius = g_Const.restirGI.spatialResamplingParams.spatialSamplingRadius;

        // Execute resampling.
        reservoir = RTXDI_GISpatialResampling(pixelPosition, primarySurface, reservoir, rng, g_Const.runtimeParams, g_Const.restirGI.reservoirBufferParams, sparams);
    }

    RTXDI_StoreGIReservoir(reservoir, g_Const.restirGI.reservoirBufferParams, reservoirPosition, g_Const.restirGI.bufferIndices.spatialResamplingOutputBufferIndex);
}